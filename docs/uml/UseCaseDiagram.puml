@startuml
'https://plantuml.com/use-case-diagram
'!theme bluegray
'skinparam defaultFontName "Arial"
'skinparam defaultFontSize 13
'skinparam usecase {
''  BackgroundColor #FFFAFA
'  BorderColor #198754
'  BorderThickness 2
'  RoundCorner 15
'}

!theme amiga

'actor actor
'actor/ "actor/"
'agent agent
'artifact artifact
'boundary boundary
'card card
'circle circle
'cloud cloud
'collections collections
'component component
'control control
'database database
'entity entity
'file file
'folder folder
'frame frame
'hexagon hexagon
'interface interface
'label label
'node node
'package package
'person person
'queue queue
'rectangle rectangle
'stack stack
'storage storage
'usecase usecase
'usecase/ "usecase/"

left to right direction
'top to bottom direction
skinparam svgLinkTarget _blank
scale 1


rectangle "iOS App" {
  actor User
  usecase "Import RAGpack (.zip) / Manage Library" as UC1
  usecase "Ask Question"
  usecase "Model Switch"
  usecase "Settings"
  usecase "Retrieve Chunks"
  usecase "Import Model Resource"
  usecase "QA Thread Management"

  usecase "Ask with Image (optional)" as UC_IMG
  usecase "Capture/Select Image (optional)" as UC_IMG_SRC

  note top of (Settings)
    The app includes embedded default
    resources (LLMModel,
    LLMRagFile) based on Llama3 for
    out-of-the-box usage. Users may
    optionally import custom resources
    if needed.
  end note

  note right of UC1
    Users import RAGpack (.zip) files that contain chunks, embeddings, and metadata.
    RAGpacks can be created via Colab (optional) or local/CLI tools and then added
    to the on-device library. Cloud import remains optional.
  end note

  note right of (Ask Question)
    Users submit queries to search
    the document
    knowledge base.
  end note

  note right of (Model Switch)
    Users select among available LLM models.
  end note

  note right of (Settings)
    Users manage configuration and defaults. On first launch, the app uses an
    embedded lightweight text model (e.g., Jan‑v1‑4B, GGUF) and default RAGpack.
    Vision model (jan‑v1‑4v) is optional and can be enabled when available.
    Prompt formatting follows metadata-driven templates (model family aware).
  end note

  note right of (Retrieve Chunks)
    Relevant chunks are fetched from the vector store using text and, when enabled,
    image embeddings. Retrieval supports multi‑RAGpack libraries.
  end note

  note right of (Import Model Resource)
    Users can import external model resources (GGUF weights, configs, optional mmproj)
    prepared via CLI tools. This enables local inference with text or vision models.
  end note

  note right of (QA Thread Management)
    QA thread history and management
    details are implemented in the NoesisNoema app.
  end note
}

rectangle "Model Pipeline" {
  usecase "Preprocess: Document Splitting & Embedding Generation\n→ RAGpack (.zip)" as UC2
  usecase "Export RAGpack (.zip)" as UC3
  usecase "Download GGUF Models (HF CLI)" as UC4
  usecase "LLM Answer"
  usecase "RAG Answer"

  note right of UC2
    Preprocessing splits documents and creates embeddings, generating a RAGpack (.zip).
    Text embeddings are required; image embeddings are optional when enabling vision
    workflows.
  end note

  note right of UC3
    All chunks, embeddings, and metadata are bundled as a single RAGpack (.zip)
    for app import. Colab is supported as an optional workflow; local/CLI is recommended
    for reproducibility.
  end note

  note right of UC4
    Primary method to fetch model artifacts reproducibly (e.g., jan‑v1‑4B/4v GGUF).
    Supports authentication, redirects, and large file handling better than raw wget.
  end note

  note right of (LLM Answer)
    LLM generates answers using metadata‑driven prompt templates (e.g., Qwen‑style for
    Jan models), based on retrieved context.
  end note

  note right of (RAG Answer)
    Retrieval Augmented Generation combines
    retrieval with LLM for better responses.
  end note

  note right
    For details on QA history/thread UI,
    see NoesisNoema app.
  end note
}

rectangle "System (Admin)" {
  actor Admin
  usecase "System Log / Audit"

  note right of (System Log / Audit)
    Admins review logs and audit trails
    for security and monitoring.
  end note
}

User --> UC1
User --> UC2
UC2 --> UC3
User --> UC4
User --> (Ask Question)
(Ask Question) --> (Retrieve Chunks)
(Retrieve Chunks) --> (LLM Answer)
(Retrieve Chunks) --> (RAG Answer)
User --> (Model Switch)
User --> (Settings)
User --> (Import Model Resource)
User --> (QA Thread Management)
User --> UC_IMG_SRC
UC_IMG_SRC --> UC_IMG
UC_IMG --> (Retrieve Chunks)

Admin --> (System Log / Audit)

@enduml