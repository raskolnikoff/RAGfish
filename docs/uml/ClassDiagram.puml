@startuml
!theme amiga
left to right direction

'=== iOS App Layer ===
class RAGApp {
    +DocumentManager documentManager
    +ModelManager modelManager
    +Settings settings
    +UserQuery ask(query): Answer
}

class DocumentManager {
    +importDocument(file)
    +loadFromGoogleDrive(file)
    +importModelResource(file)
    +ragpacks: RAGpack[*]
}

class RAGpack {
    +filename: String
    +metadata: Map
    +chunks: Chunk[*]
    +isEmbedded: Bool
    +Note: Always imported/exported as .zip archive, not individual files
}

class Chunk {
    +content: String
    +embedding: float[]
}

class VectorStore {
    +chunks: Chunk[*]
    +findRelevant(queryEmbedding): Chunk[*]
}

class UserQuery {
    +question: String
    +runQuery(): Answer
}

class AnswerGenerator {
    +generate(chunks: Chunk[*], query: String): Answer
}

class ModelManager {
    +currentEmbeddingModel: EmbeddingModel
    +currentLLMModel: LLMModel
    +switchEmbeddingModel(name)
    +switchLLMModel(name)
}

class QAPair {
    +question: String
    +answer: String
    +timestamp: DateTime
}

'=== Settings manages only the essential configuration for the app. ===
class Settings {
    +selectedEmbeddingModelName: String
    +selectedLLMModelName: String
    +ragpackPath: String
    +modelResourcePath: String
    +theme: String
    +language: String
    +load()
    +save()
    +isUsingEmbeddedModel: Bool
    +isUsingEmbeddedRAGpack: Bool
    +useEmbeddedResources()
}
note right of Settings
App includes embedded default resources (LLMModel, RAGpack) for out-of-the-box usage.
Users may optionally import custom resources if needed.
end note

note right of QAPair
UI-level thread, history, and QA management is detailed in NoesisNoema implementation.
end note

'=== Model Pipeline Layer ===
class Preprocessor {
    +preprocess(document): Chunk[*]
}

class EmbeddingModel {
    +name: String
    +embed(text: String): float[]
}

class LLMModel {
    +name: String
    +modelFile: String
    +version: String
    +generate(prompt: String): String
    +loadModel(file)
}

class ChunkExporter {
    +export(chunks: Chunk[*]): RAGpack
}

'=== Storage / External Services ===
class GoogleDriveService {
    +upload(file)
    +download(filename)
    +listFiles()
}

class FileResource {
    +filename: String
    +data: Binary
}

'=== Admin ===
class SystemLog {
    +logEvent(event: String)
}

'=== Relations with multiplicity ===
DocumentManager "1" -- "0..*" RAGpack
RAGpack "1" -- "0..*" Chunk
RAGApp "1" -- "0..*" QAPair

'=== Relations ===
RAGApp --> DocumentManager
RAGApp --> ModelManager
RAGApp --> Settings
RAGApp --> UserQuery
DocumentManager --> RAGpack
RAGpack --> Chunk
DocumentManager --> GoogleDriveService
'Import/download only; export/upload not included unless extended later
DocumentManager --> FileResource
DocumentManager --> LLMModel
UserQuery --> VectorStore
VectorStore --> Chunk
UserQuery --> AnswerGenerator
AnswerGenerator --> Chunk
ModelManager --> EmbeddingModel
ModelManager --> LLMModel
Preprocessor --> EmbeddingModel
Preprocessor --> Chunk
ChunkExporter --> RAGpack
GoogleDriveService --> FileResource

@enduml